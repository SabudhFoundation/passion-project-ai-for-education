{
    "1": "Question: `Write a function to merge two linked lists.`\n\n--Test Cases Start--\n```python\ndef test_solution(solution):\n    class ListNode:\n        def __init__(self, value=0, next=None):\n            self.value = value\n            self.next = next\n\n    def linked_list_to_list(node):\n        result = []\n        while node:\n            result.append(node.value)\n            node = node.next\n        return result\n\n    def list_to_linked_list(lst):\n        if not lst:\n            return None\n        head = ListNode(lst[0])\n        current = head\n        for value in lst[1:]:\n            current.next = ListNode(value)\n            current = current.next\n        return head\n\n    # Test case 1: Merging two non-empty linked lists\n    list1 = list_to_linked_list([1, 3, 5])\n    list2 = list_to_linked_list([2, 4, 6])\n    expected_result = [1, 2, 3, 4, 5, 6]\n    if linked_list_to_list(solution(list1, list2)) == expected_result:\n        passed.append(\"Solution has passed test case 1 with parameters [1, 3, 5] and [2, 4, 6]\")\n    else:\n        not_passed.append(\"Solution has not passed test case 1 with inputs [1, 3, 5] and [2, 4, 6]\")\n\n    # Test case 2: Merging one empty linked list with a non-empty linked list\n    list1 = list_to_linked_list([])\n    list2 = list_to_linked_list([1, 2, 3])\n    expected_result = [1, 2, 3]\n    if linked_list_to_list(solution(list1, list2)) == expected_result:\n        passed.append(\"Solution has passed test case 2 with parameters [] and [1, 2, 3]\")\n    else:\n        not_passed.append(\"Solution has not passed test case 2 with inputs [] and [1, 2, 3]\")\n\n    # Test case 3: Merging two empty linked lists\n    list1 = list_to_linked_list([])\n    list2 = list_to_linked_list([])\n    expected_result = []\n    if linked_list_to_list(solution(list1, list2)) == expected_result:\n        passed.append(\"Solution has passed test case 3 with parameters [] and []\")\n    else:\n        not_passed.append(\"Solution has not passed test case 3 with inputs [] and []\")\n\n    # Test case 4: Merging linked lists of different lengths\n    list1 = list_to_linked_list([1, 3])\n    list2 = list_to_linked_list([2, 4, 5, 6])\n    expected_result = [1, 2, 3, 4, 5, 6]\n    if linked_list_to_list(solution(list1, list2)) == expected_result:\n        passed.append(\"Solution has passed test case 4 with parameters [1, 3] and [2, 4, 5, 6]\")\n    else:\n        not_passed.append(\"Solution has not passed test case 4 with inputs [1, 3] and [2, 4, 5, 6]\")\n\n    return passed, not_passed\n```\n--Test Cases End--\n\n--Constraints Start--\n- The Function should be named 'solution'.\n- The Function should take two parameters, both of which are the heads of linked lists (ListNode).\n- The Function should output the head of the merged linked list (ListNode).\n- The output linked list should be sorted in ascending order.\n--Constraints End--",
    "2": "Question: `Write a function to reverse a Linked List`\n\n--Test Cases Start--\n```python\ndef test_solution(solution):\n    class ListNode:\n        def __init__(self, value=0, next=None):\n            self.value = value\n            self.next = next\n\n    def linked_list_to_list(head):\n        result = []\n        while head:\n            result.append(head.value)\n            head = head.next\n        return result\n\n    def list_to_linked_list(lst):\n        if not lst:\n            return None\n        head = ListNode(lst[0])\n        current = head\n        for value in lst[1:]:\n            current.next = ListNode(value)\n            current = current.next\n        return head\n\n    passed = []\n    not_passed = []\n\n    # Test case 1: Normal case\n    input_list = [1, 2, 3, 4, 5]\n    expected_output = [5, 4, 3, 2, 1]\n    head = list_to_linked_list(input_list)\n    if linked_list_to_list(solution(head)) == expected_output:\n        passed.append(\"Solution has passed test case with input \" + str(input_list))\n    else:\n        not_passed.append(\"Solution has not passed test case with input \" + str(input_list) + \" expected result \" + str(expected_output))\n\n    # Test case 2: Single element\n    input_list = [1]\n    expected_output = [1]\n    head = list_to_linked_list(input_list)\n    if linked_list_to_list(solution(head)) == expected_output:\n        passed.append(\"Solution has passed test case with input \" + str(input_list))\n    else:\n        not_passed.append(\"Solution has not passed test case with input \" + str(input_list) + \" expected result \" + str(expected_output))\n\n    # Test case 3: Empty list\n    input_list = []\n    expected_output = []\n    head = list_to_linked_list(input_list)\n    if linked_list_to_list(solution(head)) == expected_output:\n        passed.append(\"Solution has passed test case with input \" + str(input_list))\n    else:\n        not_passed.append(\"Solution has not passed test case with input \" + str(input_list) + \" expected result \" + str(expected_output))\n\n    # Test case 4: Two elements\n    input_list = [1, 2]\n    expected_output = [2, 1]\n    head = list_to_linked_list(input_list)\n    if linked_list_to_list(solution(head)) == expected_output:\n        passed.append(\"Solution has passed test case with input \" + str(input_list))\n    else:\n        not_passed.append(\"Solution has not passed test case with input \" + str(input_list) + \" expected result \" + str(expected_output))\n\n    # Test case 5: Multiple elements with duplicates\n    input_list = [1, 2, 3, 2, 1]\n    expected_output = [1, 2, 3, 2, 1]\n    head = list_to_linked_list(input_list)\n    if linked_list_to_list(solution(head)) == expected_output:\n        passed.append(\"Solution has passed test case with input \" + str(input_list))\n    else:\n        not_passed.append(\"Solution has not passed test case with input \" + str(input_list) + \" expected result \" + str(expected_output))\n\n    return passed, not_passed\n```\n--Test Cases End--\n\n--Constraints Start--\n- The Function should be named 'solution'.\n- The Function should take a single parameter, which is the head of the linked list (of type ListNode).\n- The Function should output the head of the reversed linked list (of type ListNode).\n- The ListNode class has the following attributes:\n  - `value`: the value of the node.\n  - `next`: a pointer to the next node in the linked list.\n--Constraints End--"
}