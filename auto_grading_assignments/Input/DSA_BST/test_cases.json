{
    "1": "Question: `Write a function to find max depth of a BST.`\r\n\r\n--Test Cases Start--\r\n```python\r\ndef test_solution(solution):\r\n    passed = []\r\n    not_passed = []\r\n\r\n    # Test case 1: Empty tree\r\n    if solution(None) == 0:\r\n        passed.append(\"Solution has passed test case with an empty tree\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with an empty tree, expected result 0\")\r\n\r\n    # Test case 2: Tree with one node\r\n    class Node:\r\n        def __init__(self, value):\r\n            self.value = value\r\n            self.left = None\r\n            self.right = None\r\n\r\n    root = Node(10)\r\n    if solution(root) == 1:\r\n        passed.append(\"Solution has passed test case with a single node tree\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with a single node tree, expected result 1\")\r\n\r\n    # Test case 3: Balanced tree\r\n    root.left = Node(5)\r\n    root.right = Node(15)\r\n    if solution(root) == 2:\r\n        passed.append(\"Solution has passed test case with a balanced tree\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with a balanced tree, expected result 2\")\r\n\r\n    # Test case 4: Unbalanced tree (left-heavy)\r\n    root.left.left = Node(3)\r\n    if solution(root) == 3:\r\n        passed.append(\"Solution has passed test case with an unbalanced left-heavy tree\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with an unbalanced left-heavy tree, expected result 3\")\r\n\r\n    # Test case 5: Unbalanced tree (right-heavy)\r\n    root.right.right = Node(20)\r\n    if solution(root) == 3:\r\n        passed.append(\"Solution has passed test case with an unbalanced right-heavy tree\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with an unbalanced right-heavy tree, expected result 3\")\r\n\r\n    # Test case 6: More complex tree\r\n    root.left.right = Node(7)\r\n    if solution(root) == 3:\r\n        passed.append(\"Solution has passed test case with a more complex tree\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with a more complex tree, expected result 3\")\r\n\r\n    return passed, not_passed\r\n```\r\n--Test Cases End--\r\n\r\n--Constraints Start--\r\n- The Function should be named 'solution'\r\n- The Function should take a single parameter, which is the root of the BST (Node).\r\n- The Function should output an integer representing the maximum depth of the BST.\r\n--Constraints End--"
}